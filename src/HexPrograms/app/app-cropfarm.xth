.include hex.xth
.include common-words.xth
.include great-spells.xth
.include hexal.xth
.include hexal-words.xth

.global cropitem
.global cropmote
.global seeditem
.global seedmote
.global queryList
.global steps
.global xlen
.global endidx
.global nulljump

\{
    g!nulljump

    //Query storage
    
    g@seeditem hexal:find-mote dup  //cropcount seedmote seedmote
    g!seedmote length               //cropcount seedcount
    
    g@cropitem hexal:find-mote dup  //cropmote cropmote
    g!cropmote length swap          //cropcount
    
    .2 list-wrap-many g!queryList

    //Calculate parameters
    get-circle-interior-size
    vector-unwrap   //z y x
    swap            //z x y
    drop            //z x
    dup g!xlen      //z x
    mul .1 sub g!endidx

    //Loop over interior positions
    \{ .0 } eval/cc                 //jump idx

    //Check if this iteration needs to pause
    dup g@endidx g@steps div ceil   //jump idx idx endidx/steps
    mod ceil                        //jump idx idx%(endidx/steps)
    .0 ?eq
    \{
        g@nulljump eval/cc //This jumps to the end of the program, leaving a continuation iota on the stack to resume harvesting
    }
    {} ? eval

    dup g@xlen div floor        //jump idx z
    over g@xlen mod floor       //jump idx z x
    .1 swap                     //jump idx z 1 x (offset y by 1)
    vector-wrap get-circle-lower-north-west-interior-position add

    dup break-block             //jump idx pos
    
     //store all crop and seed items
    \{                                  //item
        dup hexal:item-type dup         //item itemtype itemtype
        g@seeditem ?eq \{ over g@seedmote hexal:mediafy-item } \{ g@cropitem ?eq \{ g@cropmote hexal:mediafy-item } {} ? eval } ? eval
    }
    over                                //jump idx pos [pattern] pos 
    .2
    zone-items
    map drop

    //Place seeds from nexus and bonemeal
    g@seedmote dup length .1 ?gt
    \{
        over hexal:place-block
        dup dup overgrow overgrow overgrow
    }
    {} ? eval                   //jump idx pos
    
    //Increment index and execute jump
    .1 add dup                  //jump idx idx
    g@endidx                    //jump idx idx endidx
    ?gt {} \{ over eval } ? eval
    
    \( //This stops any additional hermes slates from causing a mishap
} eval/cc